import { Subscriber } from '../types';

class AirtableService {
  private apiKey: string;
  private subscribersBaseId: string;

  constructor(apiKey: string, subscribersBaseId: string) {
    this.apiKey = apiKey;
    this.subscribersBaseId = subscribersBaseId;
  }

  private async makeRequest(baseId: string, tableName: string, method: 'GET' | 'POST' | 'PATCH' = 'GET', data?: any) {
    const url = `https://api.airtable.com/v0/${baseId}/${encodeURIComponent(tableName)}`;
    
    console.log('üåê Tentative de requ√™te Airtable:', {
      url,
      method,
      baseId,
      tableName,
      hasApiKey: !!this.apiKey,
      apiKeyLength: this.apiKey?.length
    });

    const options: RequestInit = {
      method,
      headers: {
        'Authorization': `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
      },
    };

    if (data && (method === 'POST' || method === 'PATCH')) {
      options.body = JSON.stringify(data);
    }

    try {
      console.log('üîÑ Envoi de la requ√™te...');
      const response = await fetch(url, options);
      
      console.log('üì° R√©ponse re√ßue:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
        headers: Object.fromEntries(response.headers.entries()),
        url: response.url
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå R√©ponse d\'erreur Airtable:', errorText);
        
        // Messages d'erreur plus explicites
        if (response.status === 401) {
          throw new Error(`Cl√© API Airtable invalide. V√©rifiez VITE_AIRTABLE_API_KEY dans votre fichier .env`);
        } else if (response.status === 403) {
          throw new Error(`Acc√®s refus√© √† Airtable. V√©rifiez que votre cl√© API a les permissions pour acc√©der √† la base ${baseId} et √† la table "${tableName}"`);
        } else if (response.status === 404) {
          throw new Error(`Base ou table Airtable introuvable. Base ID: ${baseId}, Table: "${tableName}". V√©rifiez VITE_AIRTABLE_SUBSCRIBERS_BASE_ID et que la table "Abonn√©s" existe`);
        } else if (response.status === 422) {
          // Erreur 422 souvent li√©e aux permissions ou mod√®le introuvable
          const errorData = JSON.parse(errorText);
          if (errorData.error?.type === 'INVALID_PERMISSIONS_OR_MODEL_NOT_FOUND') {
            throw new Error(`ERREUR PERMISSIONS AIRTABLE:\n\n` +
              `üîë Cl√© API: ${this.apiKey.substring(0, 15)}...\n` +
              `üìä Base ID: ${baseId}\n` +
              `üìã Table: "${tableName}"\n\n` +
              `SOLUTIONS:\n` +
              `1. V√©rifiez que votre cl√© API a acc√®s √† cette base sp√©cifique\n` +
              `2. Confirmez que la table "Abonn√©s" existe dans la base\n` +
              `3. Allez dans Airtable ‚Üí Account ‚Üí API ‚Üí V√©rifiez les permissions\n` +
              `4. Testez dans l'API Explorer: https://airtable.com/api`);
          }
          throw new Error(`Erreur de validation Airtable (422). D√©tails: ${errorText}`);
        } else {
          throw new Error(`Erreur Airtable ${response.status}: ${response.statusText}. D√©tails: ${errorText}`);
        }
      }
      
      console.log('‚úÖ R√©ponse OK, parsing JSON...');
      const result = await response.json();
      console.log('üìä Donn√©es re√ßues:', {
        recordsCount: result.records?.length || 0,
        hasOffset: !!result.offset
      });
      return result;
    } catch (error) {
      console.error('‚ùå Erreur d√©taill√©e:', {
        name: error?.constructor?.name,
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined
      });
      
      // Gestion sp√©cifique de l'erreur "Failed to fetch"
      if (error instanceof TypeError && error.message === 'Failed to fetch') {
        throw new Error(`Erreur de r√©seau: Impossible de se connecter √† Airtable. V√©rifiez votre connexion internet et les param√®tres CORS.`);
      }
      
      if (error instanceof Error && error.message.includes('CORS')) {
        throw new Error(`Erreur CORS: Airtable bloque la requ√™te. Cela peut √™tre d√ª aux param√®tres de s√©curit√© du navigateur.`);
      }
      
      throw error;
    }
  }

  async getSubscribers(): Promise<Subscriber[]> {
    try {
      console.log('üì° === CONNEXION AIRTABLE ===');
      console.log('üîß Tentative de connexion √† Airtable...');
      console.log('üîß Base ID:', this.subscribersBaseId);
      console.log('üîß API Key:', this.apiKey ? `${this.apiKey.substring(0, 15)}...` : 'MANQUANTE');
      
      // Champs sp√©cifiques √† r√©cup√©rer
      const fieldsToRetrieve = [
        'Nom', 'Pr√©nom', 'T√©l√©phone', 'Email', 
        'Installateur', 'Contrat abonn√©', 'Lien CRM'
      ];
      
      console.log('üîß Champs recherch√©s:', fieldsToRetrieve);
      
      // V√©rification pr√©liminaire des param√®tres
      if (!this.apiKey || !this.subscribersBaseId) {
        throw new Error('Configuration Airtable incompl√®te: cl√© API ou Base ID manquante');
      }
      
      if (!this.apiKey.startsWith('pat') && !this.apiKey.startsWith('key')) {
        throw new Error('Format de cl√© API Airtable invalide. La cl√© doit commencer par "pat" ou "key"');
      }
      
      if (!this.subscribersBaseId.startsWith('app')) {
        throw new Error('Format de Base ID Airtable invalide. L\'ID doit commencer par "app"');
      }
      
      // R√©cup√©rer tous les enregistrements avec pagination
      let allRecords: any[] = [];
      let offset: string | undefined = undefined;
      let pageCount = 0;
      
      do {
        pageCount++;
        if (pageCount === 1) {
          console.log(`üìÑ R√©cup√©ration page ${pageCount}...`);
        }
        
        const tableName = 'Abonn√©s';
        
        // Construire l'URL avec les champs sp√©cifiques
        let url = encodeURIComponent(tableName);
        const params = new URLSearchParams();
        
        // Ajouter les champs sp√©cifiques
        fieldsToRetrieve.forEach(field => {
          params.append('fields[]', field);
        });
        
        if (offset) {
          params.append('offset', offset);
        }
        
        const fullUrl = `${url}?${params.toString()}`;
        console.log('üîó URL de requ√™te:', fullUrl);
        
        const response = await this.makeRequest(this.subscribersBaseId, `${tableName}?${params.toString()}`, 'GET');
        
        if (response.records) {
          allRecords = allRecords.concat(response.records);
          if (pageCount === 1) {
            console.log(`üìä ${response.records.length} enregistrements sur cette page`);
            // Afficher un exemple d'enregistrement pour debug
            if (response.records.length > 0) {
              console.log('üìã Exemple d\'enregistrement:', {
                id: response.records[0].id,
                availableFields: Object.keys(response.records[0].fields || {}),
                sampleData: response.records[0].fields
              });
            }
          }
        }
        
        offset = response.offset;
      } while (offset);
      
      if (allRecords.length === 0) {
        console.warn('‚ö†Ô∏è === AUCUN ABONN√â TROUV√â ===');
        console.warn('‚ö†Ô∏è V√©rifiez:');
        console.warn('‚ö†Ô∏è 1. Table "Abonn√©s" existe dans Airtable');
        console.warn('‚ö†Ô∏è 2. Table contient des donn√©es');
        console.warn('‚ö†Ô∏è 3. Permissions de la cl√© API');
        return [];
      }
      
      console.log(`‚úÖ TOTAL: ${allRecords.length} abonn√©s r√©cup√©r√©s`);
      
      const subscribers = allRecords.map((record: any) => ({
        id: record.id,
        nom: record.fields['Nom'] || '',
        prenom: record.fields['Pr√©nom'] || '',
        contratAbonne: record.fields['Contrat abonn√©'] || '',
        nomEntreprise: '', // Pas demand√© dans la liste
        installateur: record.fields['Installateur'] || '',
        lienCRM: record.fields['Lien CRM'] || '',
        email: record.fields['Email'] || '',
        telephone: record.fields['T√©l√©phone'] || '',
      }));
      
      // Debug simplifi√©
      if (allRecords.length > 0) {
        const firstRecord = allRecords[0];
        console.log('üîç === ANALYSE SIMPLIFI√âE ===');
        console.log('üîç ID du premier enregistrement:', firstRecord.id);
        console.log('üîç Champs r√©cup√©r√©s:', Object.keys(firstRecord.fields));
        
        // V√©rifier les valeurs des champs demand√©s
        fieldsToRetrieve.forEach(field => {
          const value = firstRecord.fields[field];
          console.log(`üîç ${field}:`, value || 'VIDE');
        });
        
        console.log('üîç === FIN ANALYSE ===');
      }
      
      // Filtrer les abonn√©s qui ont au moins un nom ou pr√©nom
      const validSubscribers = subscribers.filter(sub => 
        sub.nom.trim() !== '' || sub.prenom.trim() !== '' || sub.contratAbonne.trim() !== ''
      );
      
      console.log('‚úÖ Abonn√©s valides apr√®s filtrage:', validSubscribers.length);
      console.log('‚úÖ Premiers abonn√©s mapp√©s:', validSubscribers.slice(0, 3));
      console.log('üì° === FIN CONNEXION AIRTABLE ===');
      return validSubscribers;
    } catch (error) {
      console.error('‚ùå === ERREUR AIRTABLE ===', error);
      throw error;
    }
  }

  async createTicketRecord(ticketData: any) {
    try {
      const response = await this.makeRequest(
        this.subscribersBaseId,
        'Tickets',
        'POST',
        {
          records: [{
            fields: ticketData
          }]
        }
      );
      return response.records?.[0];
    } catch (error) {
      throw error;
    }
  }

  async updateTicketRecord(recordId: string, ticketData: any) {
    try {
      const response = await this.makeRequest(
        this.subscribersBaseId,
        `Tickets/${recordId}`,
        'PATCH',
        {
          fields: ticketData
        }
      );
      return response;
    } catch (error) {
      throw error;
    }
  }
}

export default AirtableService;